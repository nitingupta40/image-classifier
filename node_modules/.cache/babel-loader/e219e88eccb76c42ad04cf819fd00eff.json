{"ast":null,"code":"var _jsxFileName = \"/Users/thesavages/projects/image-classifier/src/App.js\";\nimport React, { useReducer, useState, useRef } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nconst stateMachine = {\n  initial: \"initial\",\n  states: {\n    initial: {\n      on: {\n        next: \"loadingModel\",\n        text: \"Load Model\"\n      }\n    },\n    loadingModel: {\n      on: {\n        next: \"modelReady\",\n        text: \"Loading Model\"\n      }\n    },\n    modelReady: {\n      on: {\n        next: \"imageReady\",\n        text: \"Upload Image\"\n      }\n    },\n    imageReady: {\n      on: {\n        next: \"identifying\",\n        text: \"Identifying Image\",\n        showImage: true\n      }\n    },\n    identifying: {\n      on: {\n        next: \"complete\",\n        text: \"Identifying...\"\n      }\n    },\n    complete: {\n      on: {\n        next: \"modelReady\",\n        text: \"Load Reset\",\n        showImage: true,\n        showResult: true\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const inputRef = useRef();\n  const imageRef = useRef();\n  const {\n    showImage = false\n  } = stateMachine.states[appState];\n\n  const next = () => dispatch(\"next\");\n\n  const load = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = event => {\n    const {\n      files\n    } = event.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const reset = () => {\n    setResults([]);\n    setImageUrl(null);\n    next();\n  };\n\n  const buttonProps = {\n    initial: {\n      text: \"Load Model\",\n      action: load\n    },\n    loadingModel: {\n      text: \"Loading Model…\",\n      action: () => {}\n    },\n    modelReady: {\n      text: \"Upload Image\",\n      action: () => {}\n    },\n    imageReady: {\n      text: \"Identify Image\",\n      action: () => {}\n    },\n    identifying: {\n      text: \"Identifying…\",\n      action: () => {}\n    },\n    complete: {\n      text: \"Reset\",\n      action: reset\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageUrl,\n    alt: \"upload-preview\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    capture: \"camera\",\n    ref: inputRef,\n    onChange: handleUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buttonProps[appState].action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, buttonProps[appState].text));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/thesavages/projects/image-classifier/src/App.js"],"names":["React","useReducer","useState","useRef","mobilenet","stateMachine","initial","states","on","next","text","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResult","reducer","currentState","event","App","appState","dispatch","model","setModel","imageUrl","setImageUrl","inputRef","imageRef","load","mobilenetModel","handleUpload","files","target","length","url","URL","createObjectURL","reset","setResults","buttonProps","action"],"mappings":"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","sourcesContent":["import React, { useReducer, useState, useRef } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\n\nconst stateMachine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\", text: \"Load Model\" } },\n    loadingModel: { on: { next: \"modelReady\", text: \"Loading Model\" } },\n    modelReady: { on: { next: \"imageReady\", text: \"Upload Image\" } },\n    imageReady: {\n      on: { next: \"identifying\", text: \"Identifying Image\", showImage: true }\n    },\n    identifying: { on: { next: \"complete\", text: \"Identifying...\" } },\n    complete: {\n      on: {\n        next: \"modelReady\",\n        text: \"Load Reset\",\n        showImage: true,\n        showResult: true\n      }\n    }\n  }\n};\n\nconst reducer = (currentState, event) =>\n  stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const inputRef = useRef();\n  const imageRef = useRef();\n  const { showImage = false } = stateMachine.states[appState]\n  const next = () => dispatch(\"next\");\n\n\n  const load = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n      next();\n    }\n  };\n\n  const reset = () => {\n    setResults([]);\n    setImageUrl(null);\n    next();\n  };\n\n  const buttonProps = {\n    initial: { text: \"Load Model\", action: load },\n    loadingModel: { text: \"Loading Model…\", action: () => {} },\n    modelReady: { text: \"Upload Image\", action: () => {} },\n    imageReady: { text: \"Identify Image\", action: () => {} },\n    identifying: { text: \"Identifying…\", action: () => {} },\n    complete: { text: \"Reset\", action: reset }\n  };\n\n  \n\n  return (\n    <div>\n      {showImage && <img src={imageUrl} alt=\"upload-preview\" ref={imageRef} />}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        ref={inputRef}\n        onChange={handleUpload}\n      ></input>\n      <button onClick={buttonProps[appState].action}>\n        {buttonProps[appState].text}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}