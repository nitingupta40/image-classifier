{"ast":null,"code":"var _jsxFileName = \"/Users/thesavages/projects/image-classifier/src/App.js\";\nimport React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: {\n      on: {\n        next: \"loadingModel\"\n      }\n    },\n    loadingModel: {\n      on: {\n        next: \"modelReady\"\n      }\n    },\n    modelReady: {\n      on: {\n        next: \"imageReady\"\n      }\n    },\n    imageReady: {\n      on: {\n        next: \"identifying\"\n      },\n      showImage: true\n    },\n    identifying: {\n      on: {\n        next: \"complete\"\n      }\n    },\n    complete: {\n      on: {\n        next: \"modelReady\"\n      },\n      showImage: true,\n      showResults: true\n    }\n  }\n};\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) => machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next(); //const model = await mobilenet.load();\n    //setModel(model);\n\n    next();\n  };\n\n  const identify = async () => {\n    next(); //const results = await model.classify(imageRef.current);\n\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const {\n      files\n    } = event.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: {\n      action: loadModel,\n      text: \"Load Model\"\n    },\n    loadingModel: {\n      text: \"Loading Model...\"\n    },\n    modelReady: {\n      action: upload,\n      text: \"Upload Image\"\n    },\n    imageReady: {\n      action: identify,\n      text: \"Identify Breed\"\n    },\n    identifying: {\n      text: \"Identifying...\"\n    },\n    complete: {\n      action: reset,\n      text: \"Reset\"\n    }\n  };\n  const {\n    showImage,\n    showResults\n  } = machine.states[appState];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageURL,\n    alt: \"upload-preview\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    capture: \"camera\",\n    onChange: handleUpload,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), showResults && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, results.map(({\n    className,\n    probability\n  }) => /*#__PURE__*/React.createElement(\"li\", {\n    key: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, `${className}: %${(probability * 100).toFixed(2)}`))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: actionButton[appState].action || (() => {}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, actionButton[appState].text));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thesavages/projects/image-classifier/src/App.js"],"names":["React","useState","useRef","useReducer","mobilenet","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","App","results","setResults","imageURL","setImageURL","model","setModel","imageRef","inputRef","reducer","state","event","appState","dispatch","loadModel","identify","reset","upload","current","click","handleUpload","files","target","length","url","URL","createObjectURL","actionButton","action","text","map","className","probability","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n  }\n};\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    //const model = await mobilenet.load();\n    //setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    //const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify Breed\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  return (\n    <div>\n      {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        onChange={handleUpload}\n        ref={inputRef}\n      />\n      {showResults && (\n        <ul>\n          {results.map(({ className, probability }) => (\n            <li key={className}>{`${className}: %${(probability * 100).toFixed(\n              2\n            )}`}</li>\n          ))}\n        </ul>\n      )}\n      <button onClick={actionButton[appState].action || (() => {})}>\n        {actionButton[appState].text}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}