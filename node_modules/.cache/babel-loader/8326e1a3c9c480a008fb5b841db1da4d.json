{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { addGradConfig } from './gradients/Add_grad';\nimport { addNGradConfig } from './gradients/AddN_grad';\nimport { batchMatMulGradConfig } from './gradients/BatchMatMul_grad';\nimport { batchToSpaceNDGradConfig } from './gradients/BatchToSpaceND_grad';\nimport { broadcastToGradConfig } from './gradients/BroadcastTo_grad';\nimport { concatGradConfig } from './gradients/Concat_grad';\nimport { conv2DGradConfig } from './gradients/Conv2D_grad';\nimport { conv2DBackpropInputGradConfig } from './gradients/Conv2DBackpropInput_grad';\nimport { conv3DGradConfig } from './gradients/Conv3D_grad';\nimport { depthwiseConv2dNativeGradConfig } from './gradients/DepthwiseConv2dNative_grad';\nimport { divGradConfig } from './gradients/Div_grad';\nimport { fusedBatchNormGradConfig } from './gradients/FusedBatchNorm_grad';\nimport { greaterEqualGradConfig } from './gradients/GreaterEqual_grad';\nimport { identityGradConfig } from './gradients/Identity_grad';\nimport { lrnGradConfig } from './gradients/LRN_grad';\nimport { maxGradConfig } from './gradients/Max_grad';\nimport { oneHotGradConfig } from './gradients/OneHot_grad';\nimport { padV2GradConfig } from './gradients/PadV2_grad';\nimport { spaceToBatchNDGradConfig } from './gradients/SpaceToBatchND_grad';\nimport { splitVGradConfig } from './gradients/SplitV_grad';\nimport { squareGradConfig } from './gradients/Square_grad';\nimport { squaredDifferenceGradConfig } from './gradients/SquaredDifference_grad';\nimport { subGradConfig } from './gradients/Sub_grad';\nimport { tileGradConfig } from './gradients/Tile_grad';\nimport { transposeGradConfig } from './gradients/Transpose_grad';\nimport { registerGradient } from './kernel_registry'; // Export all kernel configs here so that the package can auto register them\n\nconst gradConfigs = [addGradConfig, addNGradConfig, batchMatMulGradConfig, batchToSpaceNDGradConfig, broadcastToGradConfig, concatGradConfig, conv2DGradConfig, conv2DBackpropInputGradConfig, conv3DGradConfig, depthwiseConv2dNativeGradConfig, divGradConfig, fusedBatchNormGradConfig, greaterEqualGradConfig, identityGradConfig, lrnGradConfig, oneHotGradConfig, padV2GradConfig, splitVGradConfig, maxGradConfig, spaceToBatchNDGradConfig, squareGradConfig, squaredDifferenceGradConfig, tileGradConfig, transposeGradConfig, subGradConfig];\n\nfor (const gradientConfig of gradConfigs) {\n  registerGradient(gradientConfig);\n}","map":{"version":3,"sources":["../src/register_all_gradients.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,qBAAR,QAAoC,8BAApC;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,qBAAR,QAAoC,8BAApC;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,6BAAR,QAA4C,sCAA5C;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,+BAAR,QAA8C,wCAA9C;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,sBAAR,QAAqC,+BAArC;AACA,SAAQ,kBAAR,QAAiC,2BAAjC;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AACA,SAAQ,wBAAR,QAAuC,iCAAvC;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,gBAAR,QAA+B,yBAA/B;AACA,SAAQ,2BAAR,QAA0C,oCAA1C;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AACA,SAAQ,cAAR,QAA6B,uBAA7B;AACA,SAAQ,mBAAR,QAAkC,4BAAlC;AAEA,SAAQ,gBAAR,QAA+B,mBAA/B,C,CAEA;;AACA,MAAM,WAAW,GAAiB,CAChC,aADgC,EACR,cADQ,EAEhC,qBAFgC,EAER,wBAFQ,EAGhC,qBAHgC,EAGR,gBAHQ,EAIhC,gBAJgC,EAIR,6BAJQ,EAKhC,gBALgC,EAKR,+BALQ,EAMhC,aANgC,EAMR,wBANQ,EAOhC,sBAPgC,EAOR,kBAPQ,EAQhC,aARgC,EAQR,gBARQ,EAShC,eATgC,EASR,gBATQ,EAUhC,aAVgC,EAUR,wBAVQ,EAWhC,gBAXgC,EAWR,2BAXQ,EAYhC,cAZgC,EAYR,mBAZQ,EAahC,aAbgC,CAAlC;;AAgBA,KAAK,MAAM,cAAX,IAA6B,WAA7B,EAA0C;AACxC,EAAA,gBAAgB,CAAC,cAAD,CAAhB;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { addGradConfig } from './gradients/Add_grad';\nimport { addNGradConfig } from './gradients/AddN_grad';\nimport { batchMatMulGradConfig } from './gradients/BatchMatMul_grad';\nimport { batchToSpaceNDGradConfig } from './gradients/BatchToSpaceND_grad';\nimport { broadcastToGradConfig } from './gradients/BroadcastTo_grad';\nimport { concatGradConfig } from './gradients/Concat_grad';\nimport { conv2DGradConfig } from './gradients/Conv2D_grad';\nimport { conv2DBackpropInputGradConfig } from './gradients/Conv2DBackpropInput_grad';\nimport { conv3DGradConfig } from './gradients/Conv3D_grad';\nimport { depthwiseConv2dNativeGradConfig } from './gradients/DepthwiseConv2dNative_grad';\nimport { divGradConfig } from './gradients/Div_grad';\nimport { fusedBatchNormGradConfig } from './gradients/FusedBatchNorm_grad';\nimport { greaterEqualGradConfig } from './gradients/GreaterEqual_grad';\nimport { identityGradConfig } from './gradients/Identity_grad';\nimport { lrnGradConfig } from './gradients/LRN_grad';\nimport { maxGradConfig } from './gradients/Max_grad';\nimport { oneHotGradConfig } from './gradients/OneHot_grad';\nimport { padV2GradConfig } from './gradients/PadV2_grad';\nimport { spaceToBatchNDGradConfig } from './gradients/SpaceToBatchND_grad';\nimport { splitVGradConfig } from './gradients/SplitV_grad';\nimport { squareGradConfig } from './gradients/Square_grad';\nimport { squaredDifferenceGradConfig } from './gradients/SquaredDifference_grad';\nimport { subGradConfig } from './gradients/Sub_grad';\nimport { tileGradConfig } from './gradients/Tile_grad';\nimport { transposeGradConfig } from './gradients/Transpose_grad';\nimport { registerGradient } from './kernel_registry';\n// Export all kernel configs here so that the package can auto register them\nconst gradConfigs = [\n    addGradConfig, addNGradConfig,\n    batchMatMulGradConfig, batchToSpaceNDGradConfig,\n    broadcastToGradConfig, concatGradConfig,\n    conv2DGradConfig, conv2DBackpropInputGradConfig,\n    conv3DGradConfig, depthwiseConv2dNativeGradConfig,\n    divGradConfig, fusedBatchNormGradConfig,\n    greaterEqualGradConfig, identityGradConfig,\n    lrnGradConfig, oneHotGradConfig,\n    padV2GradConfig, splitVGradConfig,\n    maxGradConfig, spaceToBatchNDGradConfig,\n    squareGradConfig, squaredDifferenceGradConfig,\n    tileGradConfig, transposeGradConfig,\n    subGradConfig\n];\nfor (const gradientConfig of gradConfigs) {\n    registerGradient(gradientConfig);\n}\n//# sourceMappingURL=register_all_gradients.js.map"]},"metadata":{},"sourceType":"module"}